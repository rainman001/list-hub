{"version":3,"sources":["components/ListItem/ListItem.js","components/List/List.js","components/ListContainer/ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","event","console","log","setState","completed","state","react_default","a","createElement","className","item","type","Component","List","onChange","target","value","onSubmit","preventDefault","listItems","concat","toConsumableArray","title","map","index","components_ListItem_ListItem","ListContainer","list","lists","components_List_List","key","App","listToAdd","components_ListContainer_ListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bab68565.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './ListItem.css';\r\n\r\nclass ListItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      completed: false\r\n    }\r\n  }\r\n\r\n  onClick = (event) => {\r\n    console.log(\"Hi!\")\r\n    this.setState({\r\n      completed: !this.state.completed\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='item'>\r\n        <p className = {this.state.completed ? 'finished' : 'unfinished'}>{this.props.item}</p>\r\n        <input type='checkbox' onClick={this.onClick}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React, {Component} from 'react';\r\nimport './List.css';\r\nimport ListItem from '../ListItem/ListItem';\r\n\r\nclass List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: '',\r\n      listItems: []\r\n    }\r\n  }\r\n\r\n  onChange = (event) => {\r\n    this.setState({\r\n        item: event.target.value\r\n    })\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n        item: '',\r\n        listItems: [...this.state.listItems, this.state.item]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>{this.props.title}</h2>\r\n        <form className=\"List\" onSubmit={this.onSubmit}>\r\n          <input value={this.state.item} onChange={this.onChange} />\r\n          <button>Add Item</button>\r\n        </form>\r\n        <div className=\"itemContainer\">\r\n          {\r\n            this.state.listItems.map((item, index) => <ListItem item={item} />)\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport './ListContainer.css';\r\nimport List from '../List/List';\r\n\r\nclass ListContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: '',\r\n      lists: []\r\n    }\r\n  }\r\n\r\n  onChange = (event) => {\r\n    this.setState({\r\n        list: event.target.value\r\n    })\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n        list: '',\r\n        lists: [...this.state.lists, this.state.list]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form className=\"header\" onSubmit={this.onSubmit}>\r\n          <input value={this.state.list} onChange={this.onChange} />\r\n          <button>Add List</button>\r\n        </form>\r\n        <div className='mainContainer'>\r\n          {\r\n            this.state.lists.map((item, index) => <List key={index} title={item}/>)\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListContainer;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListContainer from './components/ListContainer/ListContainer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listToAdd: '',\n      lists: []\n    };\n  }\n\n  onChange = (event) => {\n      this.setState({\n          listToAdd: event.target.value\n      })\n  }\n\n  onSubmit = (event) => {\n      event.preventDefault();\n      this.setState({\n          listToAdd: '',\n          lists: [...this.state.lists, this.state.listToAdd]\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <ListContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}